import re

def extract_info(text):
    email_regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    phone_regex = r'\b(?:\+?\d{1,3}[-.\s]?)?\(?(?:\d{3})?\)?[-.\s]?\d{3}[-.\s]?\d{4}\b'
    name_regex = r'[А-Я][а-я]+'
    
    email = re.findall(email_regex, text)
    phone = re.findall(phone_regex, text)
    name = re.findall(name_regex, text)
    
    data = {'имя': name, 'электронная почта': email, 'номер телефона': phone}
    return data

text = "Меня зовут Марсель, мой адрес электронной почты marselle@example.com, и мой номер телефона +7 (999) 999-9999"
data = extract_info(text)
print(data)

# Этот код использует регулярные выражения для адресов электронной почты и номеров телефонов, 
# которые подходят для русского текста, и регулярное выражение для имен, которое ищет русские имена. 

# Переменная name_regex теперь содержит шаблон регулярного выражения [А-Я][а-я]+, которое ищет русскую заглавную букву, 
# за которой следует одна или более строчных букв.

# код остается таким же, как и раньше - он ищет все совпадения с шаблоном в тексте и сохраняет результаты в словаре с ключами 'имя', 
# 'электронная почта' и 'номер телефона'. Наконец, он возвращает словарь data и выводит его на экран.

# Стоит отметить, что так как регулярные выражения, используемые в этом примере, 
# не подстроены под конкретный формат русских адресов электронной почты и номеров телефонов, возможно, 
# что они не смогут найти все адреса электронной почты и номера телефонов в русском тексте. 
# Чтобы увеличить точность, рекомендуется использовать более конкретные шаблоны и протестировать их с различными примерами русского текста.
